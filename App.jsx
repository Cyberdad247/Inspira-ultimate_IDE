import React, { useState, useEffect } from 'react';
import { Toaster } from 'react-hot-toast';
import Navigation from './components/Navigation';
import Dashboard from './components/Dashboard';
import AgentDashboard from './components/AgentDashboard';
import CodeEditor from './components/CodeEditor';
import SymbolectEngine from './components/SymbolectEngine';
import { FeatureRequestForm } from './components/FeatureRequestForm';
import { ThemeProvider } from './components/ThemeProvider';
import { ErrorBoundary } from './components/ErrorBoundary';
import './App.css';

// Mock user data
const mockUser = {
  id: 1,
  name: 'Alex Developer',
  email: 'alex@hive-ide.com',
  avatar: '/api/placeholder/32/32'
};

function App() {
  const [currentView, setCurrentView] = useState('dashboard');
  const [user, setUser] = useState(mockUser);
  const [activeTask, setActiveTask] = useState(null);
  const [generatedCode, setGeneratedCode] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [symbolectData, setSymbolectData] = useState(null);
  const [projects, setProjects] = useState([
    {
      id: 1,
      name: 'HiveIDE MVP',
      description: 'AI-powered development assistant',
      status: 'active'
    }
  ]);

  useEffect(() => {
    // Initialize app
    console.log('🐝 HiveIDE MVP initialized');
    // Check for saved theme
    const savedTheme = localStorage.getItem('hive-theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
    }

    // Simulate loading user data
    setTimeout(() => {
      console.log('✅ User data loaded');
    }, 1000);
  }, []);

  const handleViewChange = (view) => {
    setCurrentView(view);
  };

  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('hive-auth-token');
    // In a real app, redirect to login
    console.log('User logged out');
  };

  const handleFeatureRequest = async (featureData) => {
    setIsGenerating(true);
    setActiveTask({
      id: Date.now(),
      title: featureData.title,
      description: featureData.description,
      naturalLanguageInput: featureData.natural_language_input,
      startTime: new Date(),
      priority: 'Medium'
    });

    try {
      // Simulate API call to generate feature
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Mock generated code
      const mockCode = {
        files: [
          {
            filename: 'auth.py',
            content: `"""
User Authentication Module
Generated by HiveIDE AI Assistant
"""

from fastapi import HTTPException, Depends
from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

SECRET_KEY = "your-secret-key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verify a password against its hash."""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """Generate password hash."""
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    """Create JWT access token."""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def authenticate_user(username: str, password: str):
    """Authenticate user credentials."""
    # TODO: Implement user lookup from database
    # This is a placeholder implementation
    if username == "demo" and password == "demo123":
        return {"username": username, "email": "demo@example.com"}
    return None
`
          },
          {
            filename: 'auth_routes.py',
            content: `"""
Authentication API Routes
Generated by HiveIDE AI Assistant
"""

from fastapi import APIRouter, HTTPException, Depends, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel
from .auth import authenticate_user, create_access_token

router = APIRouter(prefix="/auth", tags=["authentication"])
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/token")

class Token(BaseModel):
    access_token: str
    token_type: str

class UserResponse(BaseModel):
    username: str
    email: str

@router.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    """Login endpoint that returns JWT token."""
    user = await authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token = create_access_token(data={"sub": user["username"]})
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/me", response_model=UserResponse)
async def read_users_me(token: str = Depends(oauth2_scheme)):
    """Get current user information."""
    # TODO: Implement token validation and user lookup
    return {"username": "demo", "email": "demo@example.com"}
`
          },
          {
            filename: 'test_auth.py',
            content: `"""
Authentication Tests
Generated by HiveIDE AI Assistant
"""

import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_login_success():
    """Test successful login."""
    response = client.post(
        "/auth/token",
        data={"username": "demo", "password": "demo123"}
    )
    assert response.status_code == 200
    data = response.json()
    assert "access_token" in data
    assert data["token_type"] == "bearer"

def test_login_invalid_credentials():
    """Test login with invalid credentials."""
    response = client.post(
        "/auth/token",
        data={"username": "invalid", "password": "wrong"}
    )
    assert response.status_code == 401

def test_protected_route_without_token():
    """Test accessing protected route without token."""
    response = client.get("/auth/me")
    assert response.status_code == 401

def test_protected_route_with_token():
    """Test accessing protected route with valid token."""
    # First login to get token
    login_response = client.post(
        "/auth/token",
        data={"username": "demo", "password": "demo123"}
    )
    token = login_response.json()["access_token"]
    
    # Use token to access protected route
    response = client.get(
        "/auth/me",
        headers={"Authorization": f"Bearer {token}"}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["username"] == "demo"
`
          }
        ],
        metadata: {
          generatedAt: new Date(),
          agentsUsed: ['conductor', 'coda', 'spark', 'sentinel', 'critic'],
          estimatedTime: '3m 42s',
          confidence: 0.94
        }
      };

      setGeneratedCode(mockCode);
      setActiveTask(prev => ({ ...prev, status: 'completed' }));
      
    } catch (error) {
      console.error('Error generating feature:', error);
      setActiveTask(prev => ({ ...prev, status: 'failed' }));
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCodeApprove = async (code) => {
    try {
      // Simulate applying code changes
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('✅ Code approved and applied');
      setGeneratedCode(null);
      setActiveTask(null);
      
      // Show success notification
      if (window.toast) {
        window.toast.success('Code successfully applied to repository!');
      }
    } catch (error) {
      console.error('Error applying code:', error);
      if (window.toast) {
        window.toast.error('Failed to apply code changes');
      }
    }
  };

  const handleCodeReject = () => {
    setGeneratedCode(null);
    setActiveTask(null);
    console.log('❌ Code rejected');
    
    if (window.toast) {
      window.toast.info('Code changes rejected');
    }
  };

  const handleSymbolGenerated = (symbolData) => {
    setSymbolectData(symbolData);
    console.log('⨹ Symbols generated:', symbolData);
  };

  const renderCurrentView = () => {
    switch (currentView) {
      case 'dashboard':
        return <Dashboard onNavigate={handleViewChange} />;
      
      case 'agents':
        return (
          <AgentDashboard 
            activeTask={activeTask}
            onAgentAction={(action) => console.log('Agent action:', action)}
          />
        );
      
      case 'code':
        return (
          <div className="space-y-6">
            {/* Feature Request Form */}
            <FeatureRequestForm
              projectId={projects[0]?.id}
              onSubmit={handleFeatureRequest}
              isLoading={isGenerating}
            />
            
            {/* Symbolect Engine */}
            {activeTask?.naturalLanguageInput && (
              <SymbolectEngine
                naturalLanguageInput={activeTask.naturalLanguageInput}
                onSymbolGenerated={handleSymbolGenerated}
              />
            )}
            
            {/* Code Editor */}
            <CodeEditor
              generatedCode={generatedCode}
              onCodeApprove={handleCodeApprove}
              onCodeReject={handleCodeReject}
              isGenerating={isGenerating}
            />
          </div>
        );
      
      case 'projects':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h1 className="text-3xl font-bold">Projects</h1>
              <button className="btn btn-primary">New Project</button>
            </div>
            <div className="grid gap-4">
              {projects.map(project => (
                <div key={project.id} className="card">
                  <div className="card-content">
                    <h3 className="font-semibold">{project.name}</h3>
                    <p className="text-muted-foreground">{project.description}</p>
                    <div className="mt-2">
                      <span className={`ai-status ai-status-${project.status === 'active' ? 'confident' : 'uncertain'}`}>
                        {project.status}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        );
      
      case 'settings':
        return (
          <div className="space-y-6">
            <h1 className="text-3xl font-bold">Settings</h1>
            <div className="card">
              <div className="card-content">
                <h3 className="font-semibold mb-4">Preferences</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Theme</label>
                    <select 
                      className="w-full p-2 border rounded"
                      onChange={(e) => {
                        document.documentElement.setAttribute('data-theme', e.target.value);
                        localStorage.setItem('hive-theme', e.target.value);
                      }}
                    >
                      <option value="light">Light</option>
                      <option value="dark">Dark</option>
                      <option value="auto">Auto</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">AI Model Preference</label>
                    <select className="w-full p-2 border rounded">
                      <option value="local">Local Models (Free)</option>
                      <option value="cloud">Cloud Models (Premium)</option>
                      <option value="hybrid">Hybrid (Recommended)</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      
      default:
        return <Dashboard onNavigate={handleViewChange} />;
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="card max-w-md w-full">
          <div className="card-content text-center">
            <div className="text-4xl mb-4">🐝</div>
            <h1 className="text-2xl font-bold mb-2">Welcome to HiveIDE</h1>
            <p className="text-muted-foreground mb-6">
              AI-Powered Development Assistant
            </p>
            <button 
              className="btn btn-primary w-full"
              onClick={() => setUser(mockUser)}
            >
              Continue as Demo User
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <ThemeProvider>
        <div className="min-h-screen bg-background">
          <Navigation
            currentView={currentView}
            onViewChange={handleViewChange}
            user={user}
            onLogout={handleLogout}
          />
          
          <main className="container mx-auto px-4 py-6">
            {renderCurrentView()}
          </main>
          
          <Toaster
            position="bottom-right"
            toastOptions={{
              duration: 4000,
              style: {
                background: 'var(--card)',
                color: 'var(--foreground)',
                border: '1px solid var(--border)',
              },
            }}
          />
        </div>
      </ThemeProvider>
    </ErrorBoundary>
  );
}

export default App;