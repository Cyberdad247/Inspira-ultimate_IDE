import React, { useState, useEffect } from 'react';
import Editor from '@monaco-editor/react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Badge } from './ui/badge';

const CodeEditor = ({ generatedCode, onCodeApprove, onCodeReject }) => {
  const [selectedFile, setSelectedFile] = useState(0);
  const [isApplying, setIsApplying] = useState(false);
  const [testResults, setTestResults] = useState(null);

  const getLanguageFromFilename = (filename) => {
    const ext = filename.split('.').pop();
    const languageMap = {
      'py': 'python',
      'js': 'javascript',
      'jsx': 'javascript',
      'ts': 'typescript',
      'tsx': 'typescript',
      'html': 'html',
      'css': 'css',
      'json': 'json',
      'md': 'markdown'
    };
    return languageMap[ext] || 'text';
  };

  const runTests = async () => {
    // Simulate test execution
    setTestResults({ status: 'running' });
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setTestResults({
      status: 'completed',
      passed: 8,
      failed: 0,
      total: 8,
      coverage: 92,
      duration: 1.2
    });
  };

  const handleApprove = async () => {
    setIsApplying(true);
    try {
      await onCodeApprove(generatedCode);
    } finally {
      setIsApplying(false);
    }
  };

  useEffect(() => {
    if (generatedCode?.files?.length > 0) {
      runTests();
    }
  }, [generatedCode]);

  if (!generatedCode?.files?.length) {
    return (
      <Card className="w-full">
        <CardContent className="flex items-center justify-center h-64 text-muted-foreground">
          No code generated yet. Submit a feature request to see results here.
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>📝 Generated Code</span>
          <div className="flex gap-2">
            <Button variant="outline" onClick={onCodeReject} disabled={isApplying}>
              ❌ Reject
            </Button>
            <Button onClick={handleApprove} disabled={isApplying}>
              {isApplying ? '⏳ Applying...' : '✅ Approve & Apply'}
            </Button>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Test Results */}
        {testResults && (
          <div className="flex items-center gap-4 p-3 bg-muted rounded-lg">
            <div className="flex items-center gap-2">
              🧪 Tests:
              {testResults.status === 'running' ? (
                <Badge variant="secondary">Running...</Badge>
              ) : (
                <Badge variant={testResults.failed === 0 ? "default" : "destructive"}>
                  {testResults.passed}/{testResults.total} passed
                </Badge>
              )}
            </div>
            {testResults.status === 'completed' && (
              <>
                <div>📊 Coverage: {testResults.coverage}%</div>
                <div>⏱️ {testResults.duration}s</div>
              </>
            )}
          </div>
        )}

        {/* File Tabs */}
        <Tabs value={selectedFile.toString()} onValueChange={(v) => setSelectedFile(parseInt(v))}>
          <TabsList className="grid w-full grid-cols-auto">
            {generatedCode.files.map((file, index) => (
              <TabsTrigger key={index} value={index.toString()}>
                {file.filename}
              </TabsTrigger>
            ))}
          </TabsList>
          
          {generatedCode.files.map((file, index) => (
            <TabsContent key={index} value={index.toString()}>
              <div className="border rounded-md overflow-hidden">
                <div className="bg-muted px-3 py-2 text-sm font-medium">
                  {file.filename}
                  <Badge variant="outline" className="ml-2">
                    {getLanguageFromFilename(file.filename)}
                  </Badge>
                </div>
                <Editor
                  height="400px"
                  language={getLanguageFromFilename(file.filename)}
                  value={file.content}
                  theme="vs-dark"
                  options={{
                    readOnly: true,
                    minimap: { enabled: false },
                    scrollBeyondLastLine: false,
                    fontSize: 14,
                    lineNumbers: 'on',
                    roundedSelection: false,
                    scrollbar: {
                      vertical: 'visible',
                      horizontal: 'visible'
                    }
                  }}
                />
              </div>
            </TabsContent>
          ))}
        </Tabs>

        {/* Code Statistics */}
        <div className="grid grid-cols-3 gap-4 text-sm">
          <div className="text-center">
            <div className="font-semibold">{generatedCode.files.length}</div>
            <div className="text-muted-foreground">Files</div>
          </div>
          <div className="text-center">
            <div className="font-semibold">
              {generatedCode.files.reduce((acc, file) => acc + file.content.split('\n').length, 0)}
            </div>
            <div className="text-muted-foreground">Lines</div>
          </div>
          <div className="text-center">
            <div className="font-semibold">
              {Math.floor(generatedCode.files.reduce((acc, file) => acc + file.content.length, 0) / 1024)}KB
            </div>
            <div className="text-muted-foreground">Size</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default CodeEditor;